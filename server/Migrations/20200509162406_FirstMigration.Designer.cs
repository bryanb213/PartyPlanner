// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Models;

namespace server.Migrations
{
    [DbContext(typeof(airtrafficContext))]
    [Migration("20200509162406_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("server.Models.Airports", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Continent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ElevationFt")
                        .HasColumnType("int");

                    b.Property<string>("GpsCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HomeLink")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IataCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ident")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IsoCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IsoRegion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("LatitudeDeg")
                        .HasColumnType("double");

                    b.Property<string>("LocalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("LongitudeDeg")
                        .HasColumnType("double");

                    b.Property<string>("Municipality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ScheduledService")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WikipediaLink")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("server.Models.Runways", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AirportIdent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("AirportRef")
                        .HasColumnType("int");

                    b.Property<int?>("Closed")
                        .HasColumnType("int");

                    b.Property<string>("HeDisplacedThresholdFt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HeElevationFt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HeHeadingDegT")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HeIdent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HeLatitudeDeg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HeLongitudeDeg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeDisplacedThresholdFt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeElevationFt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeHeadingDegT")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeIdent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeLatitudeDeg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeLongitudeDeg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LengthFt")
                        .HasColumnType("int");

                    b.Property<int?>("Lighted")
                        .HasColumnType("int");

                    b.Property<string>("Surface")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("WidthFt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Runways");
                });
#pragma warning restore 612, 618
        }
    }
}
